{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\reactProject\\\\src\\\\components\\\\Users\\\\UsersContainer.jsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { follow, setUsers, unfollow, setCurrentPage, setTotalUsersCount, toggleIsFetching } from '../../Redux/usersReducer';\nimport * as axios from 'axios';\nimport Users from './Users';\nimport Preloader from '../Common/Preloader/Preloader';\n\nclass UsersContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onPageChanged = pageNumber => {\n      this.props.setCurrentPage(pageNumber);\n      this.props.tooggleIsFetching(true);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`).then(response => {\n        this.props.tooggleIsFetching(true);\n        this.props.setUsers(response.data.items);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.toogleIsFetching(true);\n    axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(response => {\n      this.props.setUsers(response.data.items);\n      this.props.setTotalUsersCount(response.data.totalCount);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.props.isFetching ? /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }, this) : null, /*#__PURE__*/_jsxDEV(Users, {\n        setTotalUsersCount: this.props.totalUsersCount,\n        pageSize: this.props.pageSize,\n        currentPage: this.props.currentPage,\n        onPageChanged: this.onPageChanged,\n        users: this.props.users,\n        follow: this.props.follow,\n        unFollow: this.props.unfollow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    users: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.UsersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching\n  };\n}; // let mapDispatchToProps = (dispatch) => {\n//   return {\n//     follow: (userId) => {\n//       dispatch(followAC(userId));\n//     },\n//     unfollow: (userId) => {\n//       dispatch(unfollowAC(userId));\n//     },\n//     setUsers: (users) => {\n//       dispatch(setUsersAC(users));\n//     },\n//     setCurrentPage: (pageNumber) => {\n//       dispatch(setCurrentPageAC(pageNumber));\n//     },\n//     setTotalUsersCount: (totalCount) => {\n//       dispatch(setTotalUsersCountAC(totalCount));\n//     },\n//     toggleIsFetchingAC: (isFetching) => {\n//       dispatch(toggleIsFetchingAC(isFetching));\n//     }\n//   }\n// }\n\n\nexport default connect(mapStateToProps, {\n  follow,\n  unfollow,\n  setUsers,\n  setCurrentPage: setCurrentPage,\n  setTotalUsersCount: setTotalUsersCount,\n  toggleIsFetchingAC: toggleIsFetching\n})(UsersContainer);","map":{"version":3,"sources":["D:/reactProject/src/components/Users/UsersContainer.jsx"],"names":["React","connect","follow","setUsers","unfollow","setCurrentPage","setTotalUsersCount","toggleIsFetching","axios","Users","Preloader","UsersContainer","Component","onPageChanged","pageNumber","props","tooggleIsFetching","get","pageSize","then","response","data","items","componentDidMount","toogleIsFetching","currentPage","totalCount","render","isFetching","totalUsersCount","users","mapStateToProps","state","usersPage","UsersPage","toggleIsFetchingAC"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport  {follow, setUsers, unfollow, setCurrentPage, setTotalUsersCount, toggleIsFetching } from '../../Redux/usersReducer';\r\nimport * as axios from 'axios';\r\nimport Users from './Users';\r\nimport Preloader from '../Common/Preloader/Preloader';\r\n\r\n\r\nclass UsersContainer extends React.Component {\r\n\r\n  componentDidMount() {\r\n    this.props.toogleIsFetching(true);\r\n    axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`)\r\n      .then(response => {\r\n       this.props.setUsers(response.data.items);\r\n       this.props.setTotalUsersCount(response.data.totalCount);\r\n    });\r\n  }\r\n\r\n  onPageChanged = (pageNumber) => {\r\n    this.props.setCurrentPage(pageNumber);\r\n    this.props.tooggleIsFetching(true);\r\n    axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`)\r\n      .then(response => {\r\n        this.props.tooggleIsFetching(true);\r\n        this.props.setUsers(response.data.items);\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    return  <>\r\n    { this.props.isFetching ? \r\n      <Preloader />: null }            \r\n    <Users setTotalUsersCount={this.props.totalUsersCount}\r\n                    pageSize={this.props.pageSize}\r\n                    currentPage={this.props.currentPage}\r\n                    onPageChanged={this.onPageChanged} \r\n                    users={this.props.users}\r\n                    follow={this.props.follow}\r\n                    unFollow={this.props.unfollow} />\r\n            </>\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    users: state.usersPage.users,\r\n    pageSize: state.usersPage.pageSize,\r\n    totalUsersCount: state.UsersPage.totalUsersCount,\r\n    currentPage: state.usersPage.currentPage,\r\n    isFetching: state.usersPage.isFetching\r\n  }\r\n}\r\n\r\n// let mapDispatchToProps = (dispatch) => {\r\n//   return {\r\n//     follow: (userId) => {\r\n//       dispatch(followAC(userId));\r\n//     },\r\n//     unfollow: (userId) => {\r\n//       dispatch(unfollowAC(userId));\r\n//     },\r\n//     setUsers: (users) => {\r\n//       dispatch(setUsersAC(users));\r\n//     },\r\n//     setCurrentPage: (pageNumber) => {\r\n//       dispatch(setCurrentPageAC(pageNumber));\r\n//     },\r\n//     setTotalUsersCount: (totalCount) => {\r\n//       dispatch(setTotalUsersCountAC(totalCount));\r\n//     },\r\n//     toggleIsFetchingAC: (isFetching) => {\r\n//       dispatch(toggleIsFetchingAC(isFetching));\r\n//     }\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n  follow,\r\n  unfollow,\r\n  setUsers,\r\n  setCurrentPage: setCurrentPage,\r\n  setTotalUsersCount: setTotalUsersCount,\r\n  toggleIsFetchingAC: toggleIsFetching\r\n})(UsersContainer);\r\n"]},"metadata":{},"sourceType":"module"}